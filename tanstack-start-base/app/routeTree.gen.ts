/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DocsImport } from './routes/docs'
import { Route as BlogImport } from './routes/blog'
import { Route as IndexImport } from './routes/index'
import { Route as BlogIndexImport } from './routes/blog.index'
import { Route as DocsSplatImport } from './routes/docs.$'
import { Route as BlogSlugIndexImport } from './routes/blog.$slug.index'

// Create/Update Routes

const DocsRoute = DocsImport.update({
  id: '/docs',
  path: '/docs',
  getParentRoute: () => rootRoute,
} as any)

const BlogRoute = BlogImport.update({
  id: '/blog',
  path: '/blog',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const BlogIndexRoute = BlogIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => BlogRoute,
} as any)

const DocsSplatRoute = DocsSplatImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => DocsRoute,
} as any)

const BlogSlugIndexRoute = BlogSlugIndexImport.update({
  id: '/$slug/',
  path: '/$slug/',
  getParentRoute: () => BlogRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/blog': {
      id: '/blog'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogImport
      parentRoute: typeof rootRoute
    }
    '/docs': {
      id: '/docs'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof DocsImport
      parentRoute: typeof rootRoute
    }
    '/docs/$': {
      id: '/docs/$'
      path: '/$'
      fullPath: '/docs/$'
      preLoaderRoute: typeof DocsSplatImport
      parentRoute: typeof DocsImport
    }
    '/blog/': {
      id: '/blog/'
      path: '/'
      fullPath: '/blog/'
      preLoaderRoute: typeof BlogIndexImport
      parentRoute: typeof BlogImport
    }
    '/blog/$slug/': {
      id: '/blog/$slug/'
      path: '/$slug'
      fullPath: '/blog/$slug'
      preLoaderRoute: typeof BlogSlugIndexImport
      parentRoute: typeof BlogImport
    }
  }
}

// Create and export the route tree

interface BlogRouteChildren {
  BlogIndexRoute: typeof BlogIndexRoute
  BlogSlugIndexRoute: typeof BlogSlugIndexRoute
}

const BlogRouteChildren: BlogRouteChildren = {
  BlogIndexRoute: BlogIndexRoute,
  BlogSlugIndexRoute: BlogSlugIndexRoute,
}

const BlogRouteWithChildren = BlogRoute._addFileChildren(BlogRouteChildren)

interface DocsRouteChildren {
  DocsSplatRoute: typeof DocsSplatRoute
}

const DocsRouteChildren: DocsRouteChildren = {
  DocsSplatRoute: DocsSplatRoute,
}

const DocsRouteWithChildren = DocsRoute._addFileChildren(DocsRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/blog': typeof BlogRouteWithChildren
  '/docs': typeof DocsRouteWithChildren
  '/docs/$': typeof DocsSplatRoute
  '/blog/': typeof BlogIndexRoute
  '/blog/$slug': typeof BlogSlugIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/docs': typeof DocsRouteWithChildren
  '/docs/$': typeof DocsSplatRoute
  '/blog': typeof BlogIndexRoute
  '/blog/$slug': typeof BlogSlugIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/blog': typeof BlogRouteWithChildren
  '/docs': typeof DocsRouteWithChildren
  '/docs/$': typeof DocsSplatRoute
  '/blog/': typeof BlogIndexRoute
  '/blog/$slug/': typeof BlogSlugIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/blog' | '/docs' | '/docs/$' | '/blog/' | '/blog/$slug'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/docs' | '/docs/$' | '/blog' | '/blog/$slug'
  id:
    | '__root__'
    | '/'
    | '/blog'
    | '/docs'
    | '/docs/$'
    | '/blog/'
    | '/blog/$slug/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BlogRoute: typeof BlogRouteWithChildren
  DocsRoute: typeof DocsRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BlogRoute: BlogRouteWithChildren,
  DocsRoute: DocsRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/blog",
        "/docs"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/blog": {
      "filePath": "blog.tsx",
      "children": [
        "/blog/",
        "/blog/$slug/"
      ]
    },
    "/docs": {
      "filePath": "docs.tsx",
      "children": [
        "/docs/$"
      ]
    },
    "/docs/$": {
      "filePath": "docs.$.tsx",
      "parent": "/docs"
    },
    "/blog/": {
      "filePath": "blog.index.tsx",
      "parent": "/blog"
    },
    "/blog/$slug/": {
      "filePath": "blog.$slug.index.tsx",
      "parent": "/blog"
    }
  }
}
ROUTE_MANIFEST_END */
